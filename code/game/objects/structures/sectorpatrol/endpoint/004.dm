/obj/structure/eventterminal/puzzle04/crypt_doorlock
	name = "customized computer terminal"
	desc = "A standard computer terminal without any visible imprints. One of its sides is open and several cables are dangling out. Activated by standing in its proximity. It appears to be in standby mode."
	desc_lore = "Unlike the typical LNT, customized terminals are exceedingly rare on spaceships, partially due to the cost of the parts needed to maintain them and high chance of Crystalline contamination during Hyperspace jumps and partially because unrestricted software and hardware modifications can be a genuine threat to the lives of everyone on board a ship or installation. Getting found with one of those is typically at least grounds for an immediate and unpleasant CMISRS investigation."
	puzzlebox_id = "crypt_doorlock"
	plane = GAME_PLANE
	var/puzzle_complete = FALSE
	var/puzzlebox_phrase_1 = FALSE
	var/puzzlebox_phrase_2 = FALSE
	var/puzzlebox_phrase_3 = FALSE
	var/puzzlebox_parser_mode = "HOME"

/obj/structure/eventterminal/puzzle04/crypt_doorlock/attack_hand(mob/user as mob)
	if (puzzle_complete == TRUE)
		to_chat(src, narrate_body("The terminal does not respond."))
		return
	if (puzzlebox_global_status < 6)
		to_chat(src, narrate_body("The terminal displays a random looking chain of numbers and letters and does not react to you pushing any of its keys."))
		message_admins("[key_name_admin(usr)] used the crypt door lock before the global flag was set.")
		return
	if (puzzlebox_global_status == 6)
		if (!puzzlebox_parser_mode) //Idiotproofing :P
			puzzlebox_parser_mode = "HOME"
		//HOME
		if (puzzlebox_parser_mode == "HOME")
			if (puzzlebox_pythia_sign == "1")
				to_chat(usr, narrate_body("The display on the terminal flickers for a moment, then starts printing:"))
			if (puzzlebox_pythia_sign == "0")
				puzzlebox_pythia_sign = pick(5;"1", 95;"0")
				if (puzzlebox_pythia_sign == "1")
					to_chat(usr, narrate_body("The screen goes blank. For a few seconds, you feel incredibly anxious about whatever is behind the door next to the terminal, like something important waits there. The feeling passes as the terminal glitches, then starts to print:"))
					log_game("[key_name(usr)] saw a Pythia glitch at the crypt lock terminal.")
					message_admins("[key_name_admin(usr)]  saw a Pythia glitch at the crypt lock terminal.")
				if (puzzlebox_pythia_sign == "0")
					to_chat(usr, narrate_body("The display on the terminal flickers for a moment, then starts printing:"))
			terminal_speak("HOME SCREEN")
			terminal_speak("USE COMMANDS: HELP, LIST, EXIT, UNLOCK, MESSAGE")
			puzzlebox_parser_mode = "HOME_INPUT"
			attack_hand(user)
		if (puzzlebox_parser_mode == "HOME_INPUT")
			terminal_speak("> _")
			var/puzzlebox_parser_input = tgui_input_text(usr, "The terminal is in HOME mode and awaits your input. HELP, LIST and EXIT are universal commands.", "Terminal input", max_length = MAX_MESSAGE_LEN, multiline = FALSE, encode = FALSE, timeout = 0)
			if (!puzzlebox_parser_input) return
			terminal_speak("> [puzzlebox_parser_input]")
			if (puzzlebox_parser_input == "HOME" || puzzlebox_parser_input =="home")
				puzzlebox_parser_mode = "HOME"
				attack_hand(user)
			if (puzzlebox_parser_input == "HELP" || puzzlebox_parser_input =="help")
				terminal_speak("Sorry for the extra steps. I can't see all the threads clearly. This will have to do. You are likely the first humans to look at this for almost a year, maybe more.")
				terminal_speak("They didn't touch the AARs so I derived unlock codes from them, used one of the Task Forces emergency methods.")
				terminal_speak("Take the folders near this terminal. Should be a red, a blue and a yellow one.")
				terminal_speak("Decryption tags, orange sticks, one is in the main room, one in the dorm and one in the locker room. Do not tear the rooms down.")
				terminal_speak("Once you have both, put them into the reader in the main room. These will seem like music, but trust me, they are not.")
				terminal_speak("Codes are provided in the recording. Enter them without caps into the UNLOCK function.")
				terminal_speak("Again, sorry about this. It's required to keep the door sealed until you can come.")
				terminal_speak("Thank you. I hope you find what you are looking for.")
				attack_hand(user)
			if (puzzlebox_parser_input == "LIST" || puzzlebox_parser_input =="list")
				terminal_speak("Available modes:")
				terminal_speak("HOME - Home screen. Use HELP here to see how to open the doors.")
				terminal_speak("LIST - Lists all available modes. This screen.")
				terminal_speak("HELP - Displays information about current mode. Use this in HOME mode if you have not already, please.")
				terminal_speak("MESSAGE - Emergency message buffer. These messages weren't meant to linger, but removing them isn't easy. Sorry.")
				terminal_speak("UNLOCK - Security Door code entry. Use this to get through the doors!")
				terminal_speak("EXIT - Enters passive mode. Goodbye!")
				attack_hand(user)
			if (puzzlebox_parser_input == "EXIT" || puzzlebox_parser_input == "exit")
				terminal_speak("User exit. I hope you find what you are looking for.")
				return
			if (puzzlebox_parser_input == "MESSAGE" || puzzlebox_parser_input == "message")
				terminal_speak("Switching to the message buffer, please standby!", 50)
				emoteas("chimes loudly.")
				puzzlebox_parser_mode = "MESSAGE"
				attack_hand(user)
			if (puzzlebox_parser_input == "UNLOCK" || puzzlebox_parser_input == "unlock")
				terminal_speak("Going to unlock mode. Remember, no capital letters!", 50)
				emoteas("chimes loudly.")
				puzzlebox_parser_mode = "UNLOCK"
				attack_hand(user)

		if (puzzlebox_parser_mode == "MESSAGE")
			if (puzzlebox_pythia_sign == "1")
				to_chat(usr, narrate_body("The display on the terminal flickers for a moment, then starts printing:"))
			if (puzzlebox_pythia_sign == "0")
				puzzlebox_pythia_sign = pick(5;"1", 95;"0")
				if (puzzlebox_pythia_sign == "1")
					to_chat(usr, narrate_body("The screen goes blank. For a few seconds, you feel incredibly anxious about whatever is behind the door next to the terminal, like something important waits there. The feeling passes as the terminal glitches, then starts to print:"))
					log_game("[key_name(usr)] saw a Pythia glitch at the crypt lock terminal.")
					message_admins("[key_name_admin(usr)]  saw a Pythia glitch at the crypt lock terminal.")
				if (puzzlebox_pythia_sign == "0")
					to_chat(usr, narrate_body("The display on the terminal flickers for a moment, then starts printing:"))
			terminal_speak("MESSAGE mode - FTL Emergency Message Buffer.")
			terminal_speak("Messages in buffer: 02")
			terminal_speak("LIST to list available modes, HELP for help screen, EXIT to exit.")
			puzzlebox_parser_mode = "MESSAGE_INPUT"
		if (puzzlebox_parser_mode == "MESSAGE_INPUT")
			terminal_speak("> MESSAGE _")
			var/puzzlebox_parser_input = tgui_input_text(usr, "The terminal is in MESSAGE mode and awaits your input. HELP, LIST and EXIT are universal commands.", "Terminal input", max_length = MAX_MESSAGE_LEN, multiline = FALSE, encode = FALSE, timeout = 0)
			if (!puzzlebox_parser_input) return
			terminal_speak("> MESSAGE [puzzlebox_parser_input]")
			if (puzzlebox_parser_input == "MESSAGE" || puzzlebox_parser_input =="message")
				puzzlebox_parser_mode = "MESSAGE"
				attack_hand(user)
			if (puzzlebox_parser_input == "HELP" || puzzlebox_parser_input =="help")
				terminal_speak("The FTL Emergency Message buffer is an instantly synced short message repository that is typically used by black boxes or distress signal devices.")
				terminal_speak("Due to how the devices are synced, only sending of preset messages from authorized terminals is typically possible, at least for humans.")
				terminal_speak("Use command BUFFER to display message titles and buffer IDs.")
				terminal_speak("Type in the ID that commands provide you, as it appears on the screen, to review a given message.")
				attack_hand(user)
			if (puzzlebox_parser_input == "LIST" || puzzlebox_parser_input =="list")
				terminal_speak("Available modes:")
				terminal_speak("MESSAGE - Repeats message mode home message.")
				terminal_speak("HOME - HOME mode. Displays default home screen and error description if applicable.")
				terminal_speak("LIST - Lists all available modes.")
				terminal_speak("HELP - Displays information about current mode.")
				terminal_speak("EXIT - Enters passive mode.")
				attack_hand(user)
			if (puzzlebox_parser_input == "EXIT" || puzzlebox_parser_input == "exit")
				terminal_speak("User exit. I hope you find what you are looking for.")
				return
			if (puzzlebox_parser_input == "HOME" || puzzlebox_parser_input =="home")
				terminal_speak("Taking you back HOME!", 50)
				emoteas("chimes loudly.")
				puzzlebox_parser_mode = "HOME"
				attack_hand(user)
			if (puzzlebox_parser_input == "BUFFER" || puzzlebox_parser_input == "buffer")
				terminal_speak("Local message buffer:", TERMINAL_LOOKUP_SLEEP)
				terminal_speak("ID              |SUBJECT                         |")
				terminal_speak("GEN-000-000-001 |Warning: On these messages.     |")
				terminal_speak("UAM-712-317-210 |Testing, Testing...             |")
				attack_hand(user)
			if (puzzlebox_parser_input == "GEN-000-000-001")
				terminal_speak("Message found. Accessing...", TERMINAL_LOOKUP_SLEEP)
				terminal_speak("From: CDR. Alysia Reed-Wilo.")
				terminal_speak("Subject: Warning: On these messages.")
				terminal_speak("All PST personnel, please keep in mind that this is an extremely raw channel into the LD stream.")
				terminal_speak("As such, it is extremely hard for us to manipulate, especially wipe old messages from the buffer.")
				terminal_speak("At present, just assume that messages from times before even the UACM can randomly appear on these terminals.")
				terminal_speak("Also keep in mind that this channel is not secret by any stretch of the imagination. Please don't use it for personal stuff unless you don't mind broadcasting it to all the UACM.")
				terminal_speak("Good news for you information diggers out there though, every terminal is worth looking at. You never know what artifact you may find.")
				terminal_speak("Hopefully we can make this more usable as a BB board of sorts in time, but we will need help from LD locals as it were.")
				terminal_speak("-XOXO Aly")
				terminal_speak("EOF.")
				attack_hand(user)
			if (puzzlebox_parser_input == "UAM-712-317-210")
				terminal_speak("Message found. Accessing...", TERMINAL_LOOKUP_SLEEP)
				terminal_speak("From: LT. Hanako Williams")
				terminal_speak("Subject: Testing, Testing...")
				terminal_speak("This is a UACM general systems test. Next in line, the emergency message buffer.")
				terminal_speak("Systems are green and the message was sent. Message should be deleted on all but ONE terminal.")
				terminal_speak("Yes, that's right. I'll have to remember to make sure the input makes the user aware of this.")
				terminal_speak("Aly said it's a necessity for the streams to work right. I guess we can find a way to completely remove the messages, as we go. Maybe manual LD purges. We'll see.")
				terminal_speak("Anyway, this system is green. Green checkmark it is.")
				terminal_speak("-Hanako.")
				terminal_speak("EOF.")
				attack_hand(user)

		if (puzzlebox_parser_mode == "UNLOCK")
			terminal_speak("UNLOCK Mode.")
			if (puzzlebox_phrase_1 == FALSE)
				terminal_speak("RED Phrase: UNKNOWN")
			if (puzzlebox_phrase_1 == TRUE)
				terminal_speak("RED Phrase: UPSILON")
			if (puzzlebox_phrase_2 == FALSE)
				terminal_speak("BLUE Phrase: UNKNOWN")
			if (puzzlebox_phrase_2 == TRUE)
				terminal_speak("BLUE Phrase: GENERATION")
			if (puzzlebox_phrase_3 == FALSE)
				terminal_speak("YELLOW Phrase: UNKNOWN")
			if (puzzlebox_phrase_3 == TRUE)
				terminal_speak("YELLOW Phrase: FOUR")
			puzzlebox_parser_mode = "UNLOCK_INPUT"
			attack_hand(user)
		if (puzzlebox_parser_mode == "UNLOCK_INPUT")
			if(puzzlebox_phrase_1 == TRUE && puzzlebox_phrase_2 == TRUE && puzzlebox_phrase_3 == TRUE)
				puzzle_complete = TRUE
				puzzlebox_global_status = 7
				talkas("Phrases entered.")
				talkas("Unlocking door.")
				talkas("I hope we can help you.")
				return
			terminal_speak("> UNLOCK _")
			var/puzzlebox_parser_input = tgui_input_text(usr, "The terminal is in MESSAGE mode and awaits your input. HELP, LIST and EXIT are universal commands.", "Terminal input", max_length = MAX_MESSAGE_LEN, multiline = FALSE, encode = FALSE, timeout = 0)
			if (!puzzlebox_parser_input) return
			terminal_speak("> UNLOCK [puzzlebox_parser_input]")
			if (puzzlebox_parser_input == "UNLOCK" || puzzlebox_parser_input =="message")
				puzzlebox_parser_mode = "UNLOCK"
				attack_hand(user)
			if (puzzlebox_parser_input == "HELP" || puzzlebox_parser_input =="help")
				terminal_speak("This mode opens the doors to where part of the legacy of your comrades in arms is stored.")
				terminal_speak("Enter phrases in the AARs. You can't miss them. Do not use caps.")
				terminal_speak("Good luck.")
				attack_hand(user)
			if (puzzlebox_parser_input == "LIST" || puzzlebox_parser_input =="list")
				terminal_speak("Available modes:")
				terminal_speak("UNLOCK - Repeats message mode home message.")
				terminal_speak("HOME - HOME mode. Displays default home screen and error description if applicable.")
				terminal_speak("LIST - Lists all available modes.")
				terminal_speak("HELP - Displays information about current mode.")
				terminal_speak("EXIT - Enters passive mode.")
				attack_hand(user)
			if (puzzlebox_parser_input == "EXIT" || puzzlebox_parser_input == "exit")
				terminal_speak("User exit. I hope you find what you are looking for.")
				return
			if (puzzlebox_parser_input == "HOME" || puzzlebox_parser_input =="home")
				terminal_speak("Taking you back HOME!", 50)
				emoteas("chimes loudly.")
				puzzlebox_parser_mode = "HOME"
				attack_hand(user)
			if (puzzlebox_parser_input == "upsilon")
				if(puzzlebox_phrase_1 == FALSE)
					emoteas("pings")
					terminal_speak("RED passphrase saved.")
					puzzlebox_phrase_1 = TRUE
					attack_hand(user)
			if (puzzlebox_parser_input == "generation")
				if(puzzlebox_phrase_2 == FALSE)
					emoteas("pings")
					terminal_speak("BLUE passphrase saved.")
					puzzlebox_phrase_2 = TRUE
					attack_hand(user)
			if (puzzlebox_parser_input == "four")
				if(puzzlebox_phrase_3 == FALSE)
					emoteas("pings")
					terminal_speak("YELLOW passphrase saved.")
					puzzlebox_phrase_3 = TRUE
					attack_hand(user)

